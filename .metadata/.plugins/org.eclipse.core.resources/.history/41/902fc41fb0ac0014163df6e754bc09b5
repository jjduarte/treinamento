package br.com.paripassu.core.dao.impl;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import br.com.paripassu.api.entidades.Fornecedor;
import br.com.paripassu.api.entidades.Produto;
import br.com.paripassu.core.dao.interfaces.FornecedorDAO;

public class FornecedorDAOImpl implements FornecedorDAO {

	public static final String INSERIR_FORNECEDOR = "INSERT INTO en_fornecedor VALUES (nextval('enFornecedor_idFornecedor_seq'), ?, ?)";
	public static final String ALTERAR_FORNECEDOR = "UPDATE en_fornecedor SET nome = ? AND id_pais = ?  where id_fornecedor = ?";
	public static final String EXCLUIR_FORNECEDOR = "DELETE * FROM en_fornecedor WHERE id_fornecedor = ?";
	public static final String LISTAR_FORNECEDOR = "SELECT id_fornecedor, nome, id_pais FROM en_fornecedor";
	
	@Override
	public void inserir(Connection conn, Fornecedor object) throws Exception {
		PreparedStatement ps;
        try{
            ps = conn.prepareStatement(INSERIR_FORNECEDOR, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, object.getNome());
            ps.setInt(2, object.getPais().getIdPais());
            
            int result = ps.executeUpdate();
            if(result !=0){
                System.out.println("Fornecedor com id "+object.getId() + "inserido com sucesso!");
            }else 
            	System.out.println("Falha ao inserir Fornecedor com id="+object.getId());
            
            ResultSet keys = ps.getGeneratedKeys();
        }catch(SQLException e){
            e.printStackTrace();
        }finally{
            try {
                ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
	}

	@Override
	public void alterar(Connection conn, Fornecedor object) throws Exception {
		PreparedStatement ps = null;
        try{
            ps = conn.prepareStatement(ALTERAR_FORNECEDOR);
            ps.setString(1, object.getNome());
            ps.setInt(2, object.getPais().getIdPais());
            ps.setInt(3, object.getId());
            int result = ps.executeUpdate();
            if(result !=0){
                System.out.println("Fornecedor com id "+object.getId() + "alterado com sucesso!");
            }else 
            	System.out.println("Falha ao alterar os dados do Fornecedor com id="+object.getId());
        }catch(SQLException e){
            e.printStackTrace();
        }finally{
            try {
                ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
		
	}

	@Override
	public void excluir(Connection conn, Integer id) throws Exception {
		PreparedStatement ps = null;
        try{
            ps = conn.prepareStatement(EXCLUIR_FORNECEDOR);
            ps.setInt(1, id);
            int result = ps.executeUpdate();
            if(result !=0){
                System.out.println("Fornecedor com id "+ id + "excluido com sucesso!");
            }else 
            	System.out.println("Falha ao excluir os dados do Fornecedor com id=" + id);
        }catch(SQLException e){
            e.printStackTrace();
        }finally{
            try {
                ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
		
	}

	@Override
	public List<Fornecedor> listar(Connection conn) throws Exception {
		PreparedStatement ps = null;
		List<Fornecedor> listaFornecedores = new ArrayList<Fornecedor>();
        try{
            ps = conn.prepareStatement(LISTAR_FORNECEDOR);
            ResultSet rs = ps.executeQuery();
            while(rs.next()){
 			   Fornecedor f = new Fornecedor();
 			   f.setId(rs.getInt(1));
 			   f.setNome(rs.getString(2));
 			   //f.setPais();
 			   listaFornecedores.add(f);
 		   }
            if(listaFornecedores.size() > 0){
                System.out.println("Lista de fornecedores cadastrados");
            }else 
            	System.out.println("Lista de fornecedores vazia!");
        }catch(SQLException e){
            e.printStackTrace();
        }finally{
            try {
                ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
		return listaFornecedores;
	}

}
